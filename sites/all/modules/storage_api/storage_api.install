<?php
// $Id: storage_api.install,v 1.1.4.5.2.9 2009/12/16 01:36:37 jbrown Exp $


/**
 * Implement hook_requirements() .
 */
function storage_api_requirements($phase) {
  $curl = FALSE;

  if(function_exists('curl_version'))
    $curl = curl_version();
  
  $t = get_t();
  $description = $t('Storage API requires that <a href="http://php.net/manual/en/book.curl.php">cURL</a> be available to PHP.');

  $requirements = array(
    'storage_api_curl' => array(
      'title' => 'Storage API - cURL',
      'value' => ($curl ? $curl['version'] : 'Not found'),
      'description' => $curl ? NULL : $description,
      'severity' => $curl ? REQUIREMENT_OK : REQUIREMENT_ERROR,
    ),
  );
  
  return $requirements;
}


/**
 * Implement hook_schema() .
 */
function storage_api_schema() {

  $schema['storage_service'] = array(
    'fields' => array(
      'service_id' => array('type' => 'varchar', 'length' => 255, 'not null' => TRUE),
      'suspended' => array('type' => 'int', 'size' => 'tiny', 'not null' => TRUE)
    ),
    'primary key' => array('service_id')
  );

  $schema['storage_container'] = array(
    'fields' => array(
      'container_id' => array('type' => 'serial', 'unsigned' => TRUE, 'not null' => TRUE),
      'name' => array('type' => 'varchar', 'length' => 255, 'not null' => TRUE),
      'service_id' => array('type' => 'varchar', 'length' => 255, 'not null' => TRUE),
      'settings' => array('type' => 'varchar', 'length' => 16383, 'not null' => TRUE, 'serialize' => TRUE),
      'serving' => array('type' => 'int', 'size' => 'tiny', 'not null' => TRUE),
      'suspended' => array('type' => 'int', 'size' => 'tiny', 'not null' => TRUE)
    ),
    'primary key' => array('container_id')
  );

  $schema['storage_class'] = array(
    'fields' => array(
      'class_id' => array('type' => 'serial', 'unsigned' => TRUE, 'not null' => TRUE),
      'name' => array('type' => 'varchar', 'length' => 255, 'not null' => TRUE),
      'options' => array('type' => 'varchar', 'length' => 255, 'not null' => TRUE, 'serialize' => TRUE)
    ),
    'primary key' => array('class_id')
  );

  $schema['storage_class_container'] = array(
    'fields' => array(
      'class_id' => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE),
      'container_id' => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE),
      'weight' => array('type' => 'int', 'not null' => TRUE),
      'serving' => array('type' => 'int', 'size' => 'tiny', 'not null' => TRUE)
    ),
    'primary key' => array('class_id', 'container_id')
  );

  $schema['storage_selector'] = array(
    'fields' => array(
      'selector_id' => array('type' => 'serial', 'unsigned' => TRUE, 'not null' => TRUE),
      'class_id' => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE),
      'migrating' => array('type' => 'int', 'size' => 'tiny', 'not null' => TRUE)
    ),
    'primary key' => array('selector_id', 'class_id')
  );

  $schema['storage_object'] = array(
    'fields' => array(
      'object_id' => array('type' => 'serial', 'unsigned' => TRUE, 'not null' => TRUE),
      'size' => array('type' => 'int', 'unsigned' => TRUE, 'size' => 'big', 'not null' => TRUE),
/*      'md5' => array('type' => 'binary', 'length' => 16, 'not null' => TRUE),
      'whirlpool' => array('type' => 'binary', 'length' => 64, 'not null' => TRUE),
*/      'mimetype' => array('type' => 'varchar', 'length' => 255, 'not null' => TRUE)
    ),
    'primary key' => array('object_id'),
/*    'unique keys' => array(
      'unique_key' => array('size', 'md5', 'whirlpool')
    )
*/  );
  
  $schema['storage_file'] = array(
    'fields' => array(
      'file_id' => array('type' => 'serial', 'unsigned' => TRUE, 'not null' => TRUE),
      'selector_id' => array('type' => 'int', 'unsigned' => TRUE),
      'object_id' => array('type' => 'int', 'unsigned' => TRUE),
      'source_url' => array('type' => 'varchar', 'length' => 4095, 'not null' => TRUE),
      'obtained' => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE),
      'filename' => array('type' => 'varchar', 'length' => 255, 'not null' => TRUE),
      'force_download' => array('type' => 'int', 'size' => 'tiny', 'not null' => TRUE),
      'module' => array('type' => 'varchar', 'length' => 255, 'not null' => TRUE),
      'type' => array('type' => 'varchar', 'length' => 255, 'not null' => TRUE),
      'nid' => array('type' => 'int', 'unsigned' => TRUE),
      'check_me' => array('type' => 'int', 'size' => 'tiny', 'not null' => TRUE),
      'data' => array('type' => 'varchar', 'length' => 255, 'not null' => TRUE, 'serialize' => TRUE),
      'serve_url' => array('type' => 'varchar', 'length' => 4095),
      'servings' => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE),
      'last_touched' => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE)
    ),
    'primary key' => array('file_id'),
    'indexes' => array(
      'check_me' => array('check_me'),
      'selector_id' => array('selector_id'),
      'servings' => array('servings')
    )
  );

  $schema['storage_object_instance'] = array(
    'fields' => array(
      'object_id' => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE),
      'container_id' => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE),
      'reference' => array('type' => 'varchar', 'length' => 255, 'not null' => TRUE)
    ),
    'primary key' => array('object_id', 'container_id')
  );
  
  $schema['storage_file_instance'] = array(
    'fields' => array(
      'file_id' => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE),
      'container_id' => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE),
      'reference' => array('type' => 'varchar', 'length' => 255, 'not null' => TRUE)
    ),
    'primary key' => array('file_id', 'container_id')
  );
  
  $schema['storage_serving'] = array(
    'fields' => array(
      'timestamp' => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE),
      'file_id' => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE),
      'container_id' => array('type' => 'int', 'unsigned' => TRUE),
      'size' => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE),
      'uid' => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE),
      'sid' => array('type' => 'char', 'length' => '32', 'not null' => TRUE),
      'ip_addr' => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE),
      'referrer' => array('type' => 'varchar', 'length' => 255, 'not null' => TRUE)
    ),
    'indexes' => array(
      'container_id' => array('container_id'),
      'file_id' => array('file_id'),
      'timestamp' => array('timestamp'),
      'uid' => array('uid')
    )
  );
  
  return $schema;
}


/**
 * Implement hook_install() .
 */
function storage_api_install() {

  drupal_install_schema('storage_api');

  db_query("
    ALTER TABLE {storage_object}
    ADD md5 BINARY(16) NOT NULL AFTER size,
    ADD whirlpool BINARY(64) NOT NULL AFTER md5,
    ADD UNIQUE(size, md5, whirlpool)
  ");
}


function storage_api_update_6100() {
  $ret = array();

  $ret[] = update_sql("
    ALTER TABLE {storage_serving}
    MODIFY container_id INT UNSIGNED DEFAULT NULL
  ");
  
  return $ret;
}


function storage_api_update_6101() {
  $ret = array();

  $ret[] = update_sql("
    ALTER TABLE {storage_selector}
    DROP PRIMARY KEY,
    ADD PRIMARY KEY (selector_id, class_id) 
  ");
  
  return $ret;
}

 
function storage_api_update_6102() {
  $ret = array();

  $ret[] = update_sql("
    ALTER TABLE {storage_file}
    MODIFY source_url VARCHAR(4095) NOT NULL
  ");
  
  return $ret;
}

 
function storage_api_update_6103() {
  $ret = array();

  $ret[] = update_sql("
    ALTER TABLE {storage_file}
    ADD last_served INT UNSIGNED NOT NULL
  ");
  
  return $ret;
}


function storage_api_update_6104() {
  $ret = array();

  $ret[] = update_sql("
    ALTER TABLE {storage_container}
    MODIFY settings VARCHAR(16383) NOT NULL 
  ");
  
  return $ret;
}


function storage_api_update_6105() {
  $ret = array();

  $ret[] = update_sql("
    ALTER TABLE {storage_file}
    ADD serve_url VARCHAR(4095) NULL
  ");
  
  return $ret;
}


function storage_api_update_6106() {
  $ret = array();

  $ret[] = update_sql("
    ALTER TABLE {storage_file}
    CHANGE last_served last_touched INT UNSIGNED NOT NULL
  ");
  
  return $ret;
}

 
/**
 * Implement hook_uninstall() .
 */
function storage_api_uninstall() {

  drupal_uninstall_schema('storage_api');
}

